{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "z9eUCjJ8e3A_"
   },
   "outputs": [],
   "source": [
    "!pip install -q transformers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from tqdm.auto import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using GPU: NVIDIA GeForce GTX 980M\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "# Check if CUDA (GPU support) is available\n",
    "if torch.cuda.is_available():\n",
    "    device = torch.device(\"cuda\")\n",
    "    print(f\"Using GPU: {torch.cuda.get_device_name(0)}\")\n",
    "else:\n",
    "    device = torch.device(\"cpu\")\n",
    "    print(\"Using CPU\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Sk5cWk-zlBjc"
   },
   "source": [
    "from transformers import pipeline\n",
    "\n",
    "classifier = pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Inform the transformers library to use the specified device (GPU or CPU)\n",
    "from transformers import pipeline\n",
    "classifier = pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\", device=0 if device.type == 'cuda' else -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "y8FsMywpecFP",
    "outputId": "802e8170-d5ef-4b93-efca-359371c608a6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sequence': 'one day I will see the world',\n",
       " 'labels': ['travel', 'dancing', 'cooking'],\n",
       " 'scores': [0.9938651323318481, 0.0032737706787884235, 0.0028610231820493937]}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sequence_to_classify = \"one day I will see the world\"\n",
    "candidate_labels = ['travel', 'cooking', 'dancing']\n",
    "\n",
    "classifier(sequence_to_classify, candidate_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3qfXHlTBfpxg"
   },
   "source": [
    "**If more than one candidate label can be correct.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ba9bICMOfmdQ",
    "outputId": "91f585eb-ed20-4f9d-85ef-4538111135c0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sequence': 'one day I will see the world',\n",
       " 'labels': ['travel', 'exploration', 'dancing', 'cooking'],\n",
       " 'scores': [0.9945111274719238,\n",
       "  0.9383887648582458,\n",
       "  0.005706172436475754,\n",
       "  0.0018193108262494206]}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "candidate_labels = ['travel', 'cooking', 'dancing', 'exploration']\n",
    "classifier(sequence_to_classify, candidate_labels, multi_label=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0TB95KDSgQqH",
    "outputId": "b0cc6b6e-94ac-45b8-ba11-6cf4a706b370"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sequence': 'Donald Trump will be next president',\n",
       " 'labels': ['politics', 'history', 'science'],\n",
       " 'scores': [0.8404949903488159, 0.15547983348369598, 0.004025168716907501]}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sequence_to_classify = \"Donald Trump will be next president\"\n",
    "candidate_labels = ['science', 'politics', 'history']\n",
    "\n",
    "classifier(sequence_to_classify, candidate_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "lFATPIUfknnZ"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D:\\downloads\\amazon_customer_reviews\n"
     ]
    }
   ],
   "source": [
    "#download_dir = 'D:\\\\downloads'\n",
    "download_dir = 'D:\\\\downloads\\\\amazon_customer_reviews'\n",
    "print(download_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['4ee3300b-8d78-46ac-8abf-72edb1f4f5db',\n",
       " 'amazon_categories.csv',\n",
       " 'amazon_products.csv',\n",
       " 'Amazon_products.zip',\n",
       " 'amazon_product_data',\n",
       " 'amazon_product_data.zip',\n",
       " 'amazon_reviews_pickle_paragraphs.pkl',\n",
       " 'amazon_reviews_pickle_paragraphs.xlsx',\n",
       " 'amazon_reviews_pickle_paragraphs_20240129.pkl',\n",
       " 'amazon_reviews_pickle_paragraphs_20240219.pkl',\n",
       " 'amazon_reviews_pickle_paragraphs_20240219.xlsx',\n",
       " 'amazon_reviews_pickle_paragraphs_similarity_20240219.pkl',\n",
       " 'amazon_reviews_pickle_paragraphs_similarity_reduced_20240219.pkl',\n",
       " 'amazon_reviews_pickle_sentences',\n",
       " 'amazon_reviews_pickle_sentences_20240129.pkl',\n",
       " 'amazon_reviews_pickle_sentences_20240219.pkl',\n",
       " 'amazon_reviews_pickle_sentences_similarity_20240219.pkl',\n",
       " 'amazon_reviews_pickle_sentences_similarity_20240219_index_paragraph.faiss',\n",
       " 'amazon_reviews_pickle_sentences_similarity_20240219_index_sentence.faiss',\n",
       " 'amazon_reviews_pickle_sentences_similarity_20240219_index_summary.faiss',\n",
       " 'chroma.sqlite3',\n",
       " 'Reviews.csv',\n",
       " 'selected_paragraphs_for_annotation.xlsx',\n",
       " '~$selected_paragraphs_for_annotation.xlsx']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(download_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sentence_filename = os.path.join(download_dir,\"amazon_reviews_pickle_sentences_20240219.pkl\")\n",
    "df_sentence = pd.read_pickle(df_sentence_filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'ProductId', 'UserId', 'ProfileName', 'HelpfulnessNumerator',\n",
       "       'HelpfulnessDenominator', 'Score', 'Time', 'Summary', 'P_index',\n",
       "       'S_sentence_number', 'Sentence', 'Summary_vector', 'Sentence_vector'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sentence.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_series = df_sentence.iloc[0:500000]['Sentence']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0         I have bought several of the Vitality canned d...\n",
      "1         The product looks more like a stew than a proc...\n",
      "2         My Labrador is finicky and she appreciates thi...\n",
      "3         Product arrived labeled as Jumbo Salted Peanut...\n",
      "4         Not sure if this was an error or if the vendor...\n",
      "                                ...                        \n",
      "499995    I went to my local warehouse store that starts...\n",
      "499996    Seriously it is the same stuff they use in the...\n",
      "499997    If you ever visit the Carmike 14 in Tyler, TX ...\n",
      "499998    My girlfriend and I love this stuff, and she w...\n",
      "499999    This buttery salt tastes just like what you fi...\n",
      "Name: Sentence, Length: 500000, dtype: object\n"
     ]
    }
   ],
   "source": [
    "type(sample_series)\n",
    "print(sample_series)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         I have bought several of the Vitality canned d...\n",
       "1         The product looks more like a stew than a proc...\n",
       "2         My Labrador is finicky and she appreciates thi...\n",
       "3         Product arrived labeled as Jumbo Salted Peanut...\n",
       "4         Not sure if this was an error or if the vendor...\n",
       "                                ...                        \n",
       "499995    I went to my local warehouse store that starts...\n",
       "499996    Seriously it is the same stuff they use in the...\n",
       "499997    If you ever visit the Carmike 14 in Tyler, TX ...\n",
       "499998    My girlfriend and I love this stuff, and she w...\n",
       "499999    This buttery salt tastes just like what you fi...\n",
       "Name: Sentence, Length: 500000, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Iterating over the Series\n",
    "#for index, sentence in sample_series.items():\n",
    "#    print(f\"Index {index}: {sentence}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Define your intent tags\n",
    "candidate_labels = [\n",
    "    \"Quality Appreciation\",\n",
    "    \"Product Description\",\n",
    "    \"Product Appearance\",\n",
    "    \"Preference Expression\",\n",
    "    \"Packaging Issue\",\n",
    "    \"Comparison\",\n",
    "    \"Complaint\",\n",
    "    \"misrepresentation\",\n",
    "    \"Historical Mention\",\n",
    "    \"Taste/Flavor Comment\",\n",
    "    \"Product Ingredients\",\n",
    "    \n",
    "]\n",
    "threshold = 0.8\n",
    "# Iterate over each sentence and classify\n",
    "for i, sentence in sample_series.items():\n",
    "    print(f\"Index {i}: {sentence}\")\n",
    "    result = classifier(sentence, candidate_labels, multi_label=True)\n",
    "    intents = result[\"labels\"]\n",
    "    scores = result[\"scores\"]\n",
    "    # Print the most likely intent for each sentence\n",
    "    print(\"Predicted intent:\", intents[0], \"with score:\", scores[0])\n",
    "    print(\"All intents and scores:\", list(zip(intents, scores)))\n",
    "    print(\"---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ensure tqdm is setup for pandas explicitly\n",
    "tqdm.pandas(desc=\"Classifying sentences\")\n",
    "\n",
    "def classify_intent_with_scores_progress(df, text_column, candidate_labels, threshold=0.5):\n",
    "    \"\"\"\n",
    "    Classify the intent of texts in the specified column of a DataFrame, including scores,\n",
    "    with progress tracking using tqdm.\n",
    "\n",
    "    Parameters:\n",
    "    - df: The DataFrame containing the text to classify.\n",
    "    - text_column: The name of the column with text to classify.\n",
    "    - candidate_labels: A list of candidate intent labels.\n",
    "    - threshold: The confidence threshold to consider a label as valid.\n",
    "\n",
    "    Returns:\n",
    "    - DataFrame with an additional column for the predicted intent and scores.\n",
    "    \"\"\"\n",
    "    # Define a helper function to get intents with scores above the threshold\n",
    "    def get_intents_with_scores(text):\n",
    "        result = classifier(text, candidate_labels, multi_label=True)\n",
    "        intents_scores = [(intent, f\"{score:.2f}\") for intent, score in zip(result[\"labels\"], result[\"scores\"]) if score > threshold]\n",
    "        return ', '.join([f\"{intent}: {score}\" for intent, score in intents_scores]) if intents_scores else 'No Intent Exceeds Threshold'\n",
    "    \n",
    "    # Apply the helper function to the specified column with progress tracking\n",
    "    df['Predicted Intent and Scores'] = df[text_column].progress_apply(get_intents_with_scores)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initialize the pipeline with GPU support if available\n",
    "device = 0 if torch.cuda.is_available() else -1\n",
    "classifier = pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\", device=device)\n",
    "\n",
    "def classify_intent_with_scores_batch(df, text_column, candidate_labels, threshold=0.5, batch_size=8):\n",
    "    \"\"\"\n",
    "    Classify the intent of texts in the specified column of a DataFrame using batch processing,\n",
    "    including scores, with progress tracking using tqdm.\n",
    "\n",
    "    Parameters:\n",
    "    - df: The DataFrame containing the text to classify.\n",
    "    - text_column: The name of the column with text to classify.\n",
    "    - candidate_labels: A list of candidate intent labels.\n",
    "    - threshold: The confidence threshold to consider a label as valid.\n",
    "    - batch_size: Number of texts to process in each batch.\n",
    "\n",
    "    Returns:\n",
    "    - DataFrame with an additional column for the predicted intent and scores.\n",
    "    \"\"\"\n",
    "    # Prepare a new column for the predicted intents and scores\n",
    "    df['Predicted Intent and Scores'] = ''\n",
    "\n",
    "    # Process in batches\n",
    "    for start in tqdm(range(0, len(df), batch_size), desc=\"Processing batches\"):\n",
    "        end = start + batch_size\n",
    "        batch_texts = df[text_column][start:end].tolist()\n",
    "        results = classifier(batch_texts, candidate_labels, multi_label=True)\n",
    "        \n",
    "        # Process each result in the batch\n",
    "        for i, result in enumerate(results):\n",
    "            intents_scores = [(intent, f\"{score:.2f}\") for intent, score in zip(result[\"labels\"], result[\"scores\"]) if score > threshold]\n",
    "            predicted_intents_scores = ', '.join([f\"{intent}: {score}\" for intent, score in intents_scores]) if intents_scores else 'No Intent Exceeds Threshold'\n",
    "            df.loc[start+i, 'Predicted Intent and Scores'] = predicted_intents_scores\n",
    "\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "threshold = 0.8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "candidate_labels = [\n",
    "    \"Quality Appreciation\",\n",
    "    \"Product Description\",\n",
    "    \"Product Appearance\",\n",
    "    \"Preference Expression\",\n",
    "    \"Packaging Issue\",\n",
    "    \"Comparison\",\n",
    "    \"Complaint\",\n",
    "    \"Misrepresentation\",\n",
    "    \"Historical Mention\",\n",
    "    \"Taste/Flavor Comment\",\n",
    "    \"Product Ingredients\",\n",
    "    \"Value for Money\",\n",
    "    \"Purchase Recommendation\",\n",
    "    \"Usage Experience\",\n",
    "    \"Product Efficacy\",\n",
    "    \"Health and Safety Concerns\",\n",
    "    \"Customer Service Experience\",\n",
    "    \"Repeat Purchase Intention\",\n",
    "    \"Emotional Response\",\n",
    "    \"Environmental/Sustainability Mention\",\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = sample_series.to_frame(name='Sentence')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mtype\u001b[39m(\u001b[43mdf\u001b[49m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'df' is not defined"
     ]
    }
   ],
   "source": [
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sentence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>I have bought several of the Vitality canned d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The product looks more like a stew than a proc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>My Labrador is finicky and she appreciates thi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not sure if this was an error or if the vendor...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499995</th>\n",
       "      <td>I went to my local warehouse store that starts...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499996</th>\n",
       "      <td>Seriously it is the same stuff they use in the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499997</th>\n",
       "      <td>If you ever visit the Carmike 14 in Tyler, TX ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499998</th>\n",
       "      <td>My girlfriend and I love this stuff, and she w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499999</th>\n",
       "      <td>This buttery salt tastes just like what you fi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Sentence\n",
       "0       I have bought several of the Vitality canned d...\n",
       "1       The product looks more like a stew than a proc...\n",
       "2       My Labrador is finicky and she appreciates thi...\n",
       "3       Product arrived labeled as Jumbo Salted Peanut...\n",
       "4       Not sure if this was an error or if the vendor...\n",
       "...                                                   ...\n",
       "499995  I went to my local warehouse store that starts...\n",
       "499996  Seriously it is the same stuff they use in the...\n",
       "499997  If you ever visit the Carmike 14 in Tyler, TX ...\n",
       "499998  My girlfriend and I love this stuff, and she w...\n",
       "499999  This buttery salt tastes just like what you fi...\n",
       "\n",
       "[500000 rows x 1 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df[\"Sentence\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "efc7629d7396476691d5e6c43479cee8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Classifying sentences:   0%|          | 0/500000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "d:\\anaconda3\\lib\\site-packages\\transformers\\pipelines\\base.py:1157: UserWarning: You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                 Sentence  \\\n",
      "0       I have bought several of the Vitality canned d...   \n",
      "1       The product looks more like a stew than a proc...   \n",
      "2       My Labrador is finicky and she appreciates thi...   \n",
      "3       Product arrived labeled as Jumbo Salted Peanut...   \n",
      "4       Not sure if this was an error or if the vendor...   \n",
      "...                                                   ...   \n",
      "499995  I went to my local warehouse store that starts...   \n",
      "499996  Seriously it is the same stuff they use in the...   \n",
      "499997  If you ever visit the Carmike 14 in Tyler, TX ...   \n",
      "499998  My girlfriend and I love this stuff, and she w...   \n",
      "499999  This buttery salt tastes just like what you fi...   \n",
      "\n",
      "                              Predicted Intent and Scores  \n",
      "0       Value for Money: 0.98, Quality Appreciation: 0...  \n",
      "1       Product Appearance: 0.96, Taste/Flavor Comment...  \n",
      "2       Value for Money: 0.98, Comparison: 0.87, Purch...  \n",
      "3       Misrepresentation: 1.00, Packaging Issue: 0.95...  \n",
      "4                             No Intent Exceeds Threshold  \n",
      "...                                                   ...  \n",
      "499995  Value for Money: 0.98, Comparison: 0.87, Repea...  \n",
      "499996                                   Comparison: 0.92  \n",
      "499997                              Value for Money: 0.81  \n",
      "499998  Value for Money: 0.85, Quality Appreciation: 0.82  \n",
      "499999       Taste/Flavor Comment: 0.94, Comparison: 0.85  \n",
      "\n",
      "[500000 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "# Assuming 'df' is your DataFrame and 'Sentence' is the column with text\n",
    "df_with_intents_scores_progress = classify_intent_with_scores_progress(df, 'Sentence', candidate_labels, threshold=0.8)\n",
    "print(df_with_intents_scores_progress)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sentence</th>\n",
       "      <th>Predicted Intent and Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>I have bought several of the Vitality canned d...</td>\n",
       "      <td>Value for Money: 0.98, Quality Appreciation: 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The product looks more like a stew than a proc...</td>\n",
       "      <td>Product Appearance: 0.96, Taste/Flavor Comment...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>My Labrador is finicky and she appreciates thi...</td>\n",
       "      <td>Value for Money: 0.98, Comparison: 0.87, Purch...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
       "      <td>Misrepresentation: 1.00, Packaging Issue: 0.95...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not sure if this was an error or if the vendor...</td>\n",
       "      <td>No Intent Exceeds Threshold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499995</th>\n",
       "      <td>I went to my local warehouse store that starts...</td>\n",
       "      <td>Value for Money: 0.98, Comparison: 0.87, Repea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499996</th>\n",
       "      <td>Seriously it is the same stuff they use in the...</td>\n",
       "      <td>Comparison: 0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499997</th>\n",
       "      <td>If you ever visit the Carmike 14 in Tyler, TX ...</td>\n",
       "      <td>Value for Money: 0.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499998</th>\n",
       "      <td>My girlfriend and I love this stuff, and she w...</td>\n",
       "      <td>Value for Money: 0.85, Quality Appreciation: 0.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499999</th>\n",
       "      <td>This buttery salt tastes just like what you fi...</td>\n",
       "      <td>Taste/Flavor Comment: 0.94, Comparison: 0.85</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Sentence  \\\n",
       "0       I have bought several of the Vitality canned d...   \n",
       "1       The product looks more like a stew than a proc...   \n",
       "2       My Labrador is finicky and she appreciates thi...   \n",
       "3       Product arrived labeled as Jumbo Salted Peanut...   \n",
       "4       Not sure if this was an error or if the vendor...   \n",
       "...                                                   ...   \n",
       "499995  I went to my local warehouse store that starts...   \n",
       "499996  Seriously it is the same stuff they use in the...   \n",
       "499997  If you ever visit the Carmike 14 in Tyler, TX ...   \n",
       "499998  My girlfriend and I love this stuff, and she w...   \n",
       "499999  This buttery salt tastes just like what you fi...   \n",
       "\n",
       "                              Predicted Intent and Scores  \n",
       "0       Value for Money: 0.98, Quality Appreciation: 0...  \n",
       "1       Product Appearance: 0.96, Taste/Flavor Comment...  \n",
       "2       Value for Money: 0.98, Comparison: 0.87, Purch...  \n",
       "3       Misrepresentation: 1.00, Packaging Issue: 0.95...  \n",
       "4                             No Intent Exceeds Threshold  \n",
       "...                                                   ...  \n",
       "499995  Value for Money: 0.98, Comparison: 0.87, Repea...  \n",
       "499996                                   Comparison: 0.92  \n",
       "499997                              Value for Money: 0.81  \n",
       "499998  Value for Money: 0.85, Quality Appreciation: 0.82  \n",
       "499999       Taste/Flavor Comment: 0.94, Comparison: 0.85  \n",
       "\n",
       "[500000 rows x 2 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_with_intents_scores_progress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sentence</th>\n",
       "      <th>Predicted Intent and Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>I have bought several of the Vitality canned d...</td>\n",
       "      <td>Value for Money: 0.98, Quality Appreciation: 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The product looks more like a stew than a proc...</td>\n",
       "      <td>Product Appearance: 0.96, Taste/Flavor Comment...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>My Labrador is finicky and she appreciates thi...</td>\n",
       "      <td>Value for Money: 0.98, Comparison: 0.87, Purch...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
       "      <td>Misrepresentation: 1.00, Packaging Issue: 0.95...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not sure if this was an error or if the vendor...</td>\n",
       "      <td>No Intent Exceeds Threshold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499995</th>\n",
       "      <td>I went to my local warehouse store that starts...</td>\n",
       "      <td>Value for Money: 0.98, Comparison: 0.87, Repea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499996</th>\n",
       "      <td>Seriously it is the same stuff they use in the...</td>\n",
       "      <td>Comparison: 0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499997</th>\n",
       "      <td>If you ever visit the Carmike 14 in Tyler, TX ...</td>\n",
       "      <td>Value for Money: 0.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499998</th>\n",
       "      <td>My girlfriend and I love this stuff, and she w...</td>\n",
       "      <td>Value for Money: 0.85, Quality Appreciation: 0.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499999</th>\n",
       "      <td>This buttery salt tastes just like what you fi...</td>\n",
       "      <td>Taste/Flavor Comment: 0.94, Comparison: 0.85</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Sentence  \\\n",
       "0       I have bought several of the Vitality canned d...   \n",
       "1       The product looks more like a stew than a proc...   \n",
       "2       My Labrador is finicky and she appreciates thi...   \n",
       "3       Product arrived labeled as Jumbo Salted Peanut...   \n",
       "4       Not sure if this was an error or if the vendor...   \n",
       "...                                                   ...   \n",
       "499995  I went to my local warehouse store that starts...   \n",
       "499996  Seriously it is the same stuff they use in the...   \n",
       "499997  If you ever visit the Carmike 14 in Tyler, TX ...   \n",
       "499998  My girlfriend and I love this stuff, and she w...   \n",
       "499999  This buttery salt tastes just like what you fi...   \n",
       "\n",
       "                              Predicted Intent and Scores  \n",
       "0       Value for Money: 0.98, Quality Appreciation: 0...  \n",
       "1       Product Appearance: 0.96, Taste/Flavor Comment...  \n",
       "2       Value for Money: 0.98, Comparison: 0.87, Purch...  \n",
       "3       Misrepresentation: 1.00, Packaging Issue: 0.95...  \n",
       "4                             No Intent Exceeds Threshold  \n",
       "...                                                   ...  \n",
       "499995  Value for Money: 0.98, Comparison: 0.87, Repea...  \n",
       "499996                                   Comparison: 0.92  \n",
       "499997                              Value for Money: 0.81  \n",
       "499998  Value for Money: 0.85, Quality Appreciation: 0.82  \n",
       "499999       Taste/Flavor Comment: 0.94, Comparison: 0.85  \n",
       "\n",
       "[500000 rows x 2 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_with_intents_scores_progress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_with_intents_scores_progress_filename = os.path.join(download_dir,\"amazon_reviews_pickle_sentences_with_intents_scores_progress_20240219.pkl\")\n",
    "df_with_intents_scores_progress.to_pickle(df_with_intents_scores_progress_filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Quality Appreciation: 0.96, Comparison: 0.80'"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_with_intents.iloc[0][\"Predicted Intent and Scores\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sentence                       I have bought several of the Vitality canned d...\n",
       "Predicted Intent and Scores         Quality Appreciation: 0.96, Comparison: 0.80\n",
       "Name: 0, dtype: object"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_with_intents.iloc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "d:\\anaconda3\\lib\\site-packages\\transformers\\pipelines\\base.py:1157: UserWarning: You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'sequence': '\\nThe quick brown fox jumps over the lazy dog. This old sentence is famous for containing every letter of the English alphabet. A clever way to demonstrate fonts, it has been used for decades by typographers and designers.\\n', 'labels': ['Typography', 'English Language', 'Animal Behavior', 'Design'], 'scores': [0.4202216565608978, 0.3329188823699951, 0.12616656720638275, 0.12069287151098251]}\n"
     ]
    }
   ],
   "source": [
    "# Example paragraph\n",
    "paragraph = \"\"\"\n",
    "The quick brown fox jumps over the lazy dog. This old sentence is famous for containing every letter of the English alphabet. A clever way to demonstrate fonts, it has been used for decades by typographers and designers.\n",
    "\"\"\"\n",
    "\n",
    "# Candidate labels\n",
    "candidate_labels = [\"Typography\", \"Animal Behavior\", \"English Language\", \"Design\"]\n",
    "\n",
    "# Classify the paragraph\n",
    "results = classifier(paragraph, candidate_labels)\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "authorship_tag": "ABX9TyM4yN31bwvm8UNTnQU245td",
   "collapsed_sections": [],
   "include_colab_link": true,
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
